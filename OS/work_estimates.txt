MorosOS To-Do:

1 mostly implementation, not much to debug, should be done quickly
2 requires some time/debugging, not too much thought (we've seen this before)
3 some new problems, mostly tricky but known implementation
4 Hard.  Lots of new things to think about/tricky to get right
5 Hardest.  Will need a lot of thought put into both implementation and design 
  (in case things get harder)

Bootloader (1) 
  must be able to load kernel

Kernel memory allocator/virtual memory (2)
  manage what memory is reserved for code, kernel, userland
  map available physical frames to available virtual addresses

Mode switch (2)
  use SYSCALL instruction to save and restore context between modes

Context switching/scheduler (1)

Standard library functions (N/A) 
  ongoing effort (both user and kernel)

Interrupt handling (4)
  enable device drivers to handle interrupts

IPC (4)

Servers (4)
  Console, sound, file, VM? timer/keyboard?

Syscalls/OS core  (3)
  some of these would be syscalls in a Pebbles kernel, but here occur in
  usermode

I/O (4)
  making use of video/audio resources

Filesystem (1)
  whatever works, really.  We're not looking to get fancy

Object file format/linker/loading programs (2)

Thread Library (2)


