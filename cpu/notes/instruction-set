Here's initial thoughts for the mcpu instruction set:

There are four classes of instruction:
  * C-type (control) -- branch, call, return, coprocessor
  * L-type (load/store)
  * I-type (integer)
  * S-type (SIMD) -- needs definition

All instructions have a predicate flag -- p0-3, true sense / complement sense.  (p3 is hard-wired as true.)

The instruction set for mcpu is templated from MIPS R4000.

ALU
===

ALU ops are:
 0: ADD    rd = rs + rt
 1: AND    rd = rs & rt
 2: NOR    rd = ~(rs | rt)
 3: OR     rd = rs | rt
 4: SUB    rd = rs - rt
 5: RSB    rd = rt - rs     (could be removed if we needed another ALU op)
 6: XOR    rd = rs ^ rt
 7: SXB    rd = sign_extend_8_to_32(rs)
 8: SXH    rd = sign_extend_16_to_32(rs)
 9: SLL    rd = rs << rt
 A: SRA    rd = ((signed)rs) >> rt
 B: SRL    rd = ((unsigned)rs) >> rt
 C: CMPLT  pn = rs < rt
 D: CMPLE  pn = rs <= rt
 E: CMPEQ  pn = rs == rt
 F: resv

ALU ops come in the forms:
  ALU rd, rs, rt
  ALU rd, rs, long_imm
  ALU rd, rs, short_imm

Control
=======

BREAK
SYSCALL

B rs, short_imm
  B long_imm
BL rs, short_imm
  BL long_imm

Note that branchreg is newpc <- pc + 16 + signextend(offset[17:0]) + rs.

ERET
  kill LL
  PC <- EPC

MFC rd, cpr
MTC cpr, rs
CPOP oper
  (encompasses TLBP, TLBR, TLBWI, TLBWR)

Load-store
==========

LB/LH/LW/LL rd, ofs(base)
  LBI/LHI/LWI/LLI rd, long_imm

SB/SH/SW/SC ofs(base), rs
  SBI/SHI/SWI/SCI long_imm, rs

FENCE

Multiplier
==========

DIV rd, rs, rt
  rd = rs / rt
  hi = rs % rt

MULT rd, rs, rt
  {hi,rd} = rs * rt

MFHI rd
MTHI rs
